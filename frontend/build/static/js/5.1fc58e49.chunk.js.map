{"version":3,"sources":["components/pages/AdminLogin.js"],"names":["AdminLogin","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useState","name","setName","email","setEmail","password","setPassword","error","setError","navigate","useNavigate","_jsxs","className","children","_jsx","Navbar","onSubmit","async","event","preventDefault","response","axios","post","data","role","login","userId","token","err","type","value","onChange","e","target","required","onClick","switchModeHandler","prevMode","Footer"],"mappings":"0GAAA,+DAgGeA,UAxFIA,KACjB,MAAMC,EAAOC,qBAAWC,MACjBC,EAAaC,GAAkBC,oBAAS,IACxCC,EAAMC,GAAWF,mBAAS,KAC1BG,EAAOC,GAAYJ,mBAAS,KAC5BK,EAAUC,GAAeN,mBAAS,KAClCO,EAAOC,GAAYR,mBAAS,IAC7BS,EAAWC,cAkCjB,OACEC,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAACC,IAAM,IACPJ,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BC,cAAA,MAAAD,SAAI,gBACJF,eAAA,QAAMK,SArCSC,UAEnB,GADAC,EAAMC,iBACHrB,EACD,IACE,MAAMsB,QAAiBC,IAAMC,KAAK,2CAAoD,CAAEnB,QAAOE,aACrE,UAAvBe,EAASG,KAAKC,MACf7B,EAAK8B,MAAML,EAASG,KAAKG,OAAQN,EAASG,KAAKC,KAAMJ,EAASG,KAAKI,OACnElB,EAAS,qBAGTD,EAAS,mCAEb,CAAE,MAAOoB,GACPpB,EAAS,sBACX,MAGA,IACE,MAAMgB,EAAO,QACPJ,QAAiBC,IAAMC,KAAK,4CAAqD,CAAErB,OAAME,QAAOE,WAAUmB,SAChH7B,EAAK8B,MAAML,EAASG,KAAKG,OAAQN,EAASG,KAAKC,KAAMJ,EAASG,KAAKI,OACnElB,EAAS,mBACX,CAAE,MAAOmB,GACPpB,EAAS,sBACX,CACF,EAYiCK,SAAA,EAC3Bf,GACEa,eAAA,OAAKC,UAAU,aAAYC,SAAA,CAC3BC,cAAA,SAAAD,SAAO,UACPC,cAAA,SACGe,KAAK,OACLC,MAAO7B,EACP8B,SAAWC,GAAM9B,EAAQ8B,EAAEC,OAAOH,OAClCI,UAAQ,OAIbvB,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACzBC,cAAA,SAAAD,SAAO,WACPC,cAAA,SACEe,KAAK,QACLC,MAAO3B,EACP4B,SAAWC,GAAM5B,EAAS4B,EAAEC,OAAOH,OACnCI,UAAQ,OAGZvB,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACzBC,cAAA,SAAAD,SAAO,cACPC,cAAA,SACEe,KAAK,WACLC,MAAOzB,EACP0B,SAAWC,GAAM1B,EAAY0B,EAAEC,OAAOH,OACtCI,UAAQ,OAGX3B,GAASO,cAAA,KAAGF,UAAU,QAAOC,SAAEN,IAChCO,cAAA,UAAQe,KAAK,SAAQhB,SAClBf,EAAc,QAAU,WAE3Ba,eAAA,UAAQC,UAAU,iBAAiBuB,QA3CjBC,KACxBrC,GAAesC,IAAaA,GAAS,EA0C+BxB,SAAA,CAAC,aAAWf,EAAc,SAAW,iBAGvGgB,cAACwB,IAAM,MACH,C","file":"static/js/5.1fc58e49.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport Navbar from '../common/Navbar';\r\nimport Footer from '../common/Footer';\r\n\r\nimport { AuthContext } from '../context/auth-context';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AdminLogin = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if(isLoginMode){\r\n      try {\r\n        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/users/login`, { email, password });\r\n        if(response.data.role === 'admin'){\r\n          auth.login(response.data.userId, response.data.role, response.data.token)\r\n          navigate('/admin/dashboard'); // Redirect to user dashboard\r\n        }\r\n        else{\r\n          setError('Please login using admin account');\r\n        }\r\n      } catch (err) {\r\n        setError('Invalid credentials');\r\n      }\r\n    }\r\n    else{\r\n      try {\r\n        const role = 'admin';\r\n        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/users/signup`, { name, email, password, role });\r\n        auth.login(response.data.userId, response.data.role, response.data.token)\r\n        navigate('/admin/dashboard'); // Redirect to user dashboard\r\n      } catch (err) {\r\n        setError('Invalid credentials');\r\n      }\r\n    }\r\n  };\r\n  \r\n  const switchModeHandler = () => {\r\n    setIsLoginMode(prevMode => !prevMode);\r\n  }\r\n\r\n  return (\r\n    <div className=\"bodyDiv\">\r\n      <Navbar />\r\n      <div className=\"login-container\">\r\n        <h2>Admin Login</h2>\r\n        <form onSubmit={handleSubmit}>\r\n        {!isLoginMode && (\r\n            <div className=\"form-group\">\r\n            <label>Name:</label>\r\n            <input\r\n               type=\"text\"\r\n               value={name}\r\n               onChange={(e) => setName(e.target.value)}\r\n               required\r\n            />\r\n            </div>\r\n          )}\r\n          <div className=\"form-group\">\r\n            <label>Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          {error && <p className=\"error\">{error}</p>}\r\n          <button type=\"submit\">\r\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n          </button>\r\n          <button className=\"switchLoginBtn\" onClick={switchModeHandler}>Switch to {isLoginMode ? 'Signup' : 'Login'}</button>\r\n        </form>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminLogin;\r\n"],"sourceRoot":""}