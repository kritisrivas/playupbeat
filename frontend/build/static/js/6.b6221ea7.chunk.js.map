{"version":3,"sources":["components/pages/CreateTournament.js"],"names":["CreateTournament","auth","useContext","AuthContext","formData","setFormData","useState","title","description","date","Date","location","creator","userId","startDate","setStartDate","tournamentCreatedMsg","setTournamentCreatedMsg","handleChange","e","name","value","target","_jsxs","className","children","_jsx","Navbar","onSubmit","async","preventDefault","axios","post","headers","token","error","console","htmlFor","type","id","onChange","required","DatePicker","selected","handleDateChange","Footer"],"mappings":"0GAAA,iFA0GeA,UAjGf,WACE,MAAMC,EAAOC,qBAAWC,MACjBC,EAAUC,GAAeC,mBAAS,CACvCC,MAAO,GACPC,YAAa,GACbC,KAAM,IAAIC,KACVC,SAAU,GACVC,QAASX,EAAKY,UAGTC,EAAWC,GAAgBT,mBAAS,IAAII,OACxCM,EAAsBC,GAA2BX,mBAAS,IAC3DY,EAAgBC,IACpB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BjB,EAAY,IAAKD,EAAU,CAACgB,GAAOC,GAAQ,EA6B7C,OACEE,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAACC,IAAM,IACPJ,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACnCC,cAAA,MAAAD,SAAI,sBACJF,eAAA,QAAMK,SA3BSC,UACnBV,EAAEW,iBACF,UACQC,IAAMC,KAAK,uCACf,IAAI5B,EAAUQ,QAASX,EAAKY,QAC5B,CACIoB,QAAS,CACL,cAAiB,UAAUhC,EAAKiC,WAGxC7B,EAAY,CACRE,MAAO,GACPC,YAAa,GACbC,KAAM,IAAIC,KACVC,SAAU,GACVC,QAASX,EAAKY,SAClBI,EAAwB,kCAC5B,CAAE,MAAOkB,GACPC,QAAQD,MAAM,SAAUA,EAC1B,GAQkCX,UAAU,aAAYC,SAAA,CAClDC,cAAA,SAAOW,QAAQ,QAAOZ,SAAC,UACvBC,cAAA,SACEY,KAAK,OACLC,GAAG,QACHnB,KAAK,QACLC,MAAOjB,EAASG,MAChBiC,SAAUtB,EACVuB,UAAQ,IAGVf,cAAA,SAAOW,QAAQ,cAAaZ,SAAC,gBAC7BC,cAAA,YACEa,GAAG,cACHnB,KAAK,cACLkB,KAAK,OACLjB,MAAOjB,EAASI,YAChBgC,SAAUtB,EACVuB,UAAQ,IAGVf,cAAA,SAAOW,QAAQ,OAAMZ,SAAC,SACtBC,cAACgB,IAAU,CACTH,GAAG,OACHnB,KAAK,OACLuB,SAAU7B,EACV0B,SAAW/B,GAzDKA,KACxBM,EAAaN,GACbJ,EAAY,IAAKD,EAAUK,KAAMA,GAAO,EAuDZmC,CAAiBnC,GACrCgC,UAAQ,IAGVf,cAAA,SAAOW,QAAQ,WAAUZ,SAAC,aAC1BC,cAAA,SACEY,KAAK,OACLC,GAAG,WACHnB,KAAK,WACLC,MAAOjB,EAASO,SAChB6B,SAAUtB,EACVuB,UAAQ,IAGVf,cAAA,UAAQY,KAAK,SAAQb,SAAC,WACtBC,cAAA,KAAAD,SAAIT,UAGRU,cAACmB,IAAM,MAGb,C","file":"static/js/6.b6221ea7.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nimport Navbar from \"../common/Navbar\";\r\nimport { AuthContext } from \"../context/auth-context\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Footer from \"../common/Footer\";\r\n\r\nfunction CreateTournament() {\r\n  const auth = useContext(AuthContext);\r\n  const [formData, setFormData] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    date: new Date(),\r\n    location: \"\",\r\n    creator: auth.userId\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [tournamentCreatedMsg, setTournamentCreatedMsg] = useState(\"\");\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setStartDate(date);\r\n    setFormData({ ...formData, date: date });\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tournaments`, \r\n        {...formData, creator: auth.userId},\r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${auth.token}` // Replace with actual token\r\n            },\r\n        });\r\n        setFormData({\r\n            title: \"\",\r\n            description: \"\",\r\n            date: new Date(),\r\n            location: \"\",\r\n            creator: auth.userId});\r\n        setTournamentCreatedMsg(\"Tournament created successfully\");\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bodyDiv\">\r\n      <Navbar />\r\n      <div className=\"event-form-container\">\r\n        <h2>Create Tournament</h2>\r\n        <form onSubmit={handleSubmit} className=\"event-form\">\r\n          <label htmlFor=\"title\">Title</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            value={formData.title}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n\r\n          <label htmlFor=\"description\">Description</label>\r\n          <textarea\r\n            id=\"description\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n            value={formData.description}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n\r\n          <label htmlFor=\"date\">Date</label>\r\n          <DatePicker\r\n            id=\"date\"\r\n            name=\"date\"\r\n            selected={startDate}\r\n            onChange={(date) => handleDateChange(date)}\r\n            required\r\n          />\r\n\r\n          <label htmlFor=\"location\">Location</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"location\"\r\n            name=\"location\"\r\n            value={formData.location}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n\r\n          <button type=\"submit\">Create</button>\r\n          <p>{tournamentCreatedMsg}</p>\r\n        </form>\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateTournament;\r\n"],"sourceRoot":""}